services:
  login:
    build:
      context: ./backend/quiz_backend_login
      dockerfile: Dockerfile
    environment:
      - APP_ENV=${APP_ENV}
      - LOG_LEVEL=${LOG_LEVEL}
      - LISTEN_PORT=${LISTEN_PORT}
      - LISTEN_ADDR=${LISTEN_ADDR}
      - SECRET_KEY=${SECRET_KEY}
      - REFRESH_SECRET_KEY={REFRESH_SECRET_KEY}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - LDAP_URL=${LDAP_URL}
      - LDAP_CA=${LDAP_CA}
      - LDAP_BASEDN=${LDAP_BASEDN}
      - LDAP_BINDDN=${LDAP_BINDDN}
      - LDAP_BINDPASSWORD=${LDAP_BINDPASSWORD}
      - LDAP_FILTER=${LDAP_FILTER}
    ports:
      - 8090:80
  users:
    build:
      context: ./backend/quiz_backend_user
      dockerfile: Dockerfile
    environment:
      - APP_ENV=${APP_ENV}
      - LOG_LEVEL=${LOG_LEVEL}
      - LISTEN_PORT=${LISTEN_PORT}
      - LISTEN_ADDR=${LISTEN_ADDR}
      - SECRET_KEY=${SECRET_KEY}
      - REFRESH_SECRET_KEY={REFRESH_SECRET_KEY}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
    ports:
      - 8091:80
  core:
    build:
      context: ./backend/quiz_backend_core
      dockerfile: Dockerfile
    environment:
      - APP_ENV=${APP_ENV}
      - LOG_LEVEL=${LOG_LEVEL}
      - LISTEN_PORT=${LISTEN_PORT}
      - LISTEN_ADDR=${LISTEN_ADDR}
      - SECRET_KEY=${SECRET_KEY}
      - REFRESH_SECRET_KEY={REFRESH_SECRET_KEY}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
    ports:
      - 8095:80
  proxy:
    image: nginx:alpine
    ports:
       - 80:80
    volumes:
      - ./config/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - login
  postgres:
    ports: #TODO REMOVE IT
      - 5432:5432
    image: postgres:16-alpine
    restart: on-failure
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=quiz
      - POSTGRES_PASSWORD=pgpassword
      - POSTGRES_DB=quiz
      - POSTGRES_HOST_AUTH_METHOD=trust
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d quiz"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  db-data:

networks:
  quiz:
    driver: bridge
