server {
    listen 80;
    server_name example.com; 

    location / {
        root /var/www/vuejs/dist; 
        try_files $uri $uri/ /index.html;
        add_header 'Access-Control-Allow-Origin' '*';
    	add_header 'Access-Control-Allow-Methods' 'GET, POST, DELETE, PUT, OPTIONS';
    	add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
    
    	if ($request_method = 'OPTIONS') {
       	  add_header 'Access-Control-Max-Age' 1728000;
          add_header 'Content-Type' 'text/plain; charset=utf-8';
          add_header 'Content-Length' 0;
          return 204;
       }
    }    

    location /login/ {
        proxy_pass http://192.168.12.115:8090/;
        #proxy_pass http://login:80/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-User-ID $upstream_http_x_user_id;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
    }

    location /users/ {
        auth_request /check_access;
        auth_request_set $auth_status $upstream_status;
        auth_request_set $auth_user_id $sent_http_x_user_id; # put value of X-User-ID header in $auth_user_id
        auth_request_set $auth_user_role $sent_http_x_user_role; # put value of X-User-Role header in $auth_user_role
        error_page 401 = @error401;
        error_page 403 = @error403;

        if ($request_method = OPTIONS) {
            add_header Content-Length 0;
            add_header Content_type text/plain;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Origin $http_origin;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type";
            return 200;
        }

        #proxy_pass http://192.168.12.131:8091/;
        proxy_pass http://users:80/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-User-ID $auth_user_id;
        proxy_set_header X-User-Role $auth_user_role;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
    }

    location /subjects/ {
       try_files $uri @core;
    }

    location /questions/ {
        try_files $uri @core;
    }

    location /quizzes/ {
        try_files $uri @core;
    }

    location @core {
        auth_request /check_access;
        auth_request_set $auth_status $upstream_status;
        auth_request_set $auth_user_id $sent_http_x_user_id; # put value of X-User-ID header in $auth_user_id
        auth_request_set $auth_user_role $sent_http_x_user_role; # put value of X-User-Role header in $auth_user_role
        error_page 401 = @error401;
        error_page 403 = @error403;

        if ($request_method = OPTIONS) {
            add_header Content-Length 0;
            add_header Content_type text/plain;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Origin $http_origin;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type";
            return 200;
        }

        proxy_pass http://192.168.12.115:8095;
        #proxy_pass http://core:80;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-User-ID $auth_user_id;
        proxy_set_header X-User-Role $auth_user_role;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
    }
    
    location /notifications/ws {
        auth_request /check_access;
        auth_request_set $auth_status $upstream_status;
        auth_request_set $auth_user_id $sent_http_x_user_id; # put value of X-User-ID header in $auth_user_id
        auth_request_set $auth_user_role $sent_http_x_user_role; # put value of X-User-Role header in $auth_user_role
        error_page 401 = @error401;
        error_page 403 = @error403;

        if ($request_method = OPTIONS) {
            add_header Content-Length 0;
            add_header Content_type text/plain;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Origin $http_origin;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type";
            return 200;
        }
    
        proxy_pass http://192.168.12.115:8096/ws;
        
        set $args '';
        
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-User-ID $auth_user_id;
        proxy_set_header X-User-Role $auth_user_role;
        proxy_read_timeout 3600s;
        proxy_send_timeout 3600s;
        proxy_buffering off;
    }

    location = /check_access {
        internal;
        proxy_pass http://192.168.12.115:8090/check_access;
        #proxy_pass http://login:80/check_access;

        # Указываем, какие коды статуса считать успешными
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header X-Original-Method $request_method;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $http_host;
        proxy_intercept_errors on;
        
        if ($request_method = OPTIONS) {
            add_header Content-Length 0;
            add_header Content_type text/plain;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type";
            return 200;
        }

        error_page 401 = @error401;
    }
    
    location @error401 {
    	return 401;
    }
    
    location @error403 {
    	return 403;
    }
    
}
